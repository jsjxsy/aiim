/**
 * 
 */
package com.orifound.aiim.dal.dao.sqlserver.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.support.JdbcDaoSupport;

import com.orifound.aiim.dal.dao.IRetentionPeriodDao;
import com.orifound.aiim.entity.ErrInfo;
import com.orifound.aiim.entity.RetentionPeriod;

/**
 * 保管期限字典表的DAO实现类（SQL Server平台）
 *
 */
public class RetentionPeriodDaoImpl extends JdbcDaoSupport implements IRetentionPeriodDao
{
	
	/**
	 * 查询结果集到实体类的映射器，该类可用于DAO实现类中
	 * 
	 */
	private class RetentionPeriodMapper implements RowMapper<RetentionPeriod>
	{
		
		@Override
		public RetentionPeriod mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			int iD = rs.getInt("ID");
			String name = rs.getString("Name");
			int totalYears = rs.getInt("TotalYears");
			String remark = rs.getString("Remark");
			
			return new RetentionPeriod(iD,name,totalYears,remark);
		}
	}
	
	/**
	 * 构造函数
	 */
	public RetentionPeriodDaoImpl()
	{

	}

	/**
	 * 带数据源的构造函数
	 * @param dataSource 数据源
	 */
	public RetentionPeriodDaoImpl(DataSource dataSource)
	{
		setDataSource(dataSource);
	}
	
	/**
	 * 查询所有保管期限的SQL语句
	 */
	private final String SQL_SELECT_ALL = "SELECT * FROM DD_RetentionPeriod ORDER BY ID";
	
	/**
	 * 保管期限字典表的数据访问对象
	 */
	private IRetentionPeriodDao retentionPeriodDao = null;

	/**
	 * 获取属性值：保管期限字典表的数据访问对象
	 * @return 保管期限字典表的数据访问对象
	 */
	public IRetentionPeriodDao getRetentionPeriodDao()
	{
		return retentionPeriodDao;
	}

	/**
	 * 设置属性值：保管期限字典表的数据访问对象
	 * @param retentionPeriodDao 保管期限字典表的数据访问对象
	 */
	public void setRetentionPeriodDao(IRetentionPeriodDao retentionPeriodDao)
	{
		this.retentionPeriodDao = retentionPeriodDao;
	}
	
	/**
	 * 检查JDBC数据源的依赖注入（JDBC DataSource Depandency Injection）
	 * @param pErrInfo 处理失败的错误原因描述
	 * @return 处理成功返回true，否则返回false
	 */
	private boolean CheckDataSourceInjection(ErrInfo pErrInfo)
	{
		boolean pFlag = true;
		int pErrPos = 0;
		Throwable throwable = new Throwable();

		try
		{
			//检查数据源是否为空
			pErrPos = 1;
			if (getDataSource() == null)
			{
				pFlag = false;
				pErrInfo.getContent().append("JDBC数据源非法为空，请检查是否有进行依赖注入或赋值。");
			}
		}
		catch (Exception e)
		{
			//异常错误
			pFlag = false;
			pErrInfo.getContent().append(e.toString());
			pErrInfo.setException(e);
		}
		finally
		{
			//拼接详细的错误描述信息，包括类名/方法名/错误位置
			if (pFlag == false && pErrInfo.getContent().length() > 0)
			{
				StackTraceElement[] stackTraceElements = throwable.getStackTrace();
				StringBuilder tempBuilder = new StringBuilder(stackTraceElements[0].getClassName());
				tempBuilder.append(".");
				tempBuilder.append(stackTraceElements[0].getMethodName());
				tempBuilder.append("-->");
				
				//如果属于异常错误，则需要在错误信息中加入错误位置标记信息
				if (pErrInfo.getException()!=null)
				{
					tempBuilder.append(" ErrPos: ");
					tempBuilder.append(pErrPos);
					tempBuilder.append(", ");
				}
				
				pErrInfo.getContent().insert(0, tempBuilder.toString());
				tempBuilder = null;
			}

			//销毁局部变量
			throwable = null;
		}

		return pFlag;
	}
	
	
	/* (non-Javadoc)
	 * @see com.orifound.aiim.dal.dao.IRetentionPeriodDao#save(com.orifound.aiim.entity.RetentionPeriod, com.orifound.aiim.entity.ErrInfo)
	 */
	@Override
	public boolean save(RetentionPeriod retentionPeriod, ErrInfo pErrInfo)
	{
		// TODO Auto-generated method stub
		return false;
	}

	/* (non-Javadoc)
	 * @see com.orifound.aiim.dal.dao.IRetentionPeriodDao#delete(com.orifound.aiim.entity.RetentionPeriod, com.orifound.aiim.entity.ErrInfo)
	 */
	@Override
	public boolean delete(RetentionPeriod retentionPeriod, ErrInfo pErrInfo)
	{
		// TODO Auto-generated method stub
		return false;
	}

	/* (non-Javadoc)
	 * @see com.orifound.aiim.dal.dao.IRetentionPeriodDao#update(com.orifound.aiim.entity.RetentionPeriod, com.orifound.aiim.entity.ErrInfo)
	 */
	@Override
	public boolean update(RetentionPeriod retentionPeriod, ErrInfo pErrInfo)
	{
		// TODO Auto-generated method stub
		return false;
	}

	/* (non-Javadoc)
	 * @see com.orifound.aiim.dal.dao.IRetentionPeriodDao#findAll(java.util.LinkedHashMap, com.orifound.aiim.entity.ErrInfo)
	 */
	@Override
	public boolean findAll(LinkedHashMap<Integer,RetentionPeriod> retentionPeriods, ErrInfo pErrInfo)
	{
		boolean pFlag = true;
		int pErrPos = 0;
		Throwable throwable = new Throwable();

		try
		{
			//检查JDBC数据源是否正确依赖注入
			if (CheckDataSourceInjection(pErrInfo) == false)
			{
				pFlag = false;
				
			}

			//执行SQL语句
			if (pFlag)
			{

				JdbcTemplate jdbcTemplate = getJdbcTemplate();
				List<RetentionPeriod> pRetentionPeriods=jdbcTemplate.query(SQL_SELECT_ALL,new RetentionPeriodMapper());

				//返回查询结果
				if (pRetentionPeriods.size() > 0)
				{
					for (RetentionPeriod item : pRetentionPeriods)
					{
						retentionPeriods.put(item.getID(), item);
					}
				}

				//销毁局部变量
				pRetentionPeriods=null;
				jdbcTemplate = null;
			}
		}
		catch (BadSqlGrammarException e)
		{
			//SQL语句语法错误
			pFlag = false;
			pErrInfo.getContent().append(e.toString());
			pErrInfo.setException(e);
			pErrInfo.setBadSQL(e.getSql());
		}
		catch (Exception e)
		{
			//其他异常错误
			pFlag = false;
			pErrInfo.getContent().append(e.toString());
			pErrInfo.setException(e);
		}
		finally
		{

			//拼接详细的错误描述信息，包括类名/方法名/错误位置
			if (pFlag == false && pErrInfo.getContent().length() > 0)
			{
				StackTraceElement[] stackTraceElements = throwable.getStackTrace();
				StringBuilder tempBuilder = new StringBuilder(stackTraceElements[0].getClassName());
				tempBuilder.append(".");
				tempBuilder.append(stackTraceElements[0].getMethodName());
				tempBuilder.append("-->");
				
				//如果属于异常错误，则需要在错误信息中加入错误位置标记信息
				if (pErrInfo.getException()!=null)
				{
					tempBuilder.append(" ErrPos: ");
					tempBuilder.append(pErrPos);
					tempBuilder.append(", ");
				}
				
				pErrInfo.getContent().insert(0, tempBuilder.toString());
				tempBuilder = null;
			}

			//销毁局部变量
			throwable = null;
		}

		return pFlag;
	}

	/* (non-Javadoc)
	 * @see com.orifound.aiim.dal.dao.IRetentionPeriodDao#findByID(int, com.orifound.aiim.entity.RetentionPeriod, com.orifound.aiim.entity.ErrInfo)
	 */
	@Override
	public boolean findByID(int pID, RetentionPeriod retentionPeriod, ErrInfo pErrInfo)
	{
		// TODO Auto-generated method stub
		return false;
	}
}